# "analysis" takes one of FULL, SAMPLE, KEEPK
# please note that training KRL and LKRL on relatively dense datasets (FULL and SAMPLE) is very slow and takes days even with using tens of cores for multiprocessing
# a typical application of KRL assumes sparse data (less than five different treatments recorded per patient, such as in KEEPK)
analysis: KEEPK
# "data" takes one of GEX, WES, CNV, MET
data: GEX
# "methods" takes a subset of KRL, LKRL, KBMTL, KRR, RF, EN
methods: [KRL, LKRL, KRR, RF, EN]
# k-fold cross validation
# (we used cv: 3 in the KRL paper )
cv: 3

# seeds for numpy.random to generate data train/test splits, CV folds, and subsampling
# if more than one seed is specified, mean and standard devation of the results can be calculated
# (we used seeds: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000] in the KRL paper)
seeds: [10000, 20000]
# Subsampling as described in the KRL paper in Section 4.2 'Prediction using sparse training datasets'
# (we used sample_ratios: [0.5, 0.2, 0.1] in the KRL paper)
sample_ratios: [0.1, 0.05]
# Subsampling as described in the KRL paper in Section 4.3 'Prediction using sparse training datasets biased towards effective therapies'
# (we used keepk: 5 and keepk_ratios: [1.0, 0.5, 0.2, 0.1] in the KRL paper)
keepk: 5
keepk_ratios: [1.0, 0.2]

# evaluation parameter k in NDCG@k used for training KRL/LKRL
# (we used krl_k: 10 and lkrl_k: 10 in the KRL paper)
krl_k: 10 
lkrl_k: 10 

# evaluation parameter k in NDCG@k and Precision@k
# "k_evals" is just for the evaluation of results, not for training KRL/LKRL
# (we used k_evals: [1, 3, 5, 10, 15, 20] in the KRL paper)
k_evals: [5, 3]

# ranges of hyper-parameter values optimized using grid search on the training set
# (see Supplementary data of the KRL paper for details)
krl_lambdas: [0.001]
krl_gammas: [0.001]
lkrl_lambdas: [100]
kbmtl_alphas: [0.001]
kbmtl_betas: [0.001]
kbmtl_gammas: [0.001]
krr_alphas: [0.001]
krr_gammas: [0.001]
rf_nestimators: [10]
en_alphas: [0.001]
en_l1ratios: [0.5]

# number of jobs to use in parallel for training KRL and LKRL
njobs: 4
# set TRUE/FALSE to show/hide training progress of KRL and LKRL
verbose: FALSE

